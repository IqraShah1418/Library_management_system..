# Abstract base class for Book
class Book:
    def __init__(self, isbn, title, author):
        self.isbn = isbn
        self.title = title
        self.author = author

    # Abstract method to be overridden by subclasses
    def borrow(self):
        raise NotImplementedError("This method should be overridden by subclasses")


# Subclass for Digital Books
class DigitalBook(Book):
    def __init__(self, isbn, title, author, file_size):
        super().__init__(isbn, title, author)
        self.file_size = file_size

    # Override the borrow method for digital books
    def borrow(self):
        return f"Downloading digital book: {self.title} by {self.author}"


# Subclass for Printed Books
class PrintedBook(Book):
    def __init__(self, isbn, title, author, condition):
        super().__init__(isbn, title, author)
        self.condition = condition

    # Override the borrow method for printed books
    def borrow(self):
        return f"Borrowing printed book: {self.title} by {self.author}. Please pick it up from the library."


# Class for the Library
class Library:
    def __init__(self):
        self.books = []  # Store all the books in the library
        self.users = []  # Store all the registered users

    def add_book(self, book):
        """Add a book to the library"""
        self.books.append(book)
        self.books.sort(key=lambda x: x.isbn)  # Sort the books by ISBN

    def remove_book(self, book):
        """Remove a book from the library"""
        self.books.remove(book)

    def search_by_isbn(self, isbn):
        """Search for a book by its ISBN using binary search"""
        return binary_search(self.books, isbn)

    def add_user(self, user):
        """Add a new user to the library"""
        self.users.append(user)


# Class for Users
class User:
    def __init__(self, user_id, name):
        self.user_id = user_id
        self.name = name
        self.borrowed_books = []  # Books borrowed by the user

    def borrow_book(self, book):
        """User borrows a book from the library"""
        self.borrowed_books.append(book)
        print(f"{self.name} borrowed the book: {book.title}")

    def return_book(self, book):
        """User returns a book to the library"""
        if book in self.borrowed_books:
            self.borrowed_books.remove(book)
            print(f"{self.name} returned the book: {book.title}")
        else:
            print(f"{self.name} doesn't have the book: {book.title}")


# Class for Borrow Transaction
from datetime import datetime, timedelta

class BorrowTransaction:
    def __init__(self, transaction_id, user, book, borrow_date=None, due_date=None):
        self.transaction_id = transaction_id
        self.user = user
        self.book = book
        self.borrow_date = borrow_date or datetime.now()
        self.due_date = due_date or self.borrow_date + timedelta(days=14)  # 2-week borrowing period

    def issue_transaction(self):
        """Issue a borrowing transaction and print the details"""
        self.user.borrow_book(self.book)
        print(f"Transaction {self.transaction_id}: {self.user.name} borrowed {self.book.title} on {self.borrow_date} (Due date: {self.due_date})")


# Binary search function to find a book by ISBN
def binary_search(books, isbn):
    """Perform a binary search to find a book by ISBN"""
    low = 0
    high = len(books) - 1
    while low <= high:
        mid = (low + high) // 2
        if books[mid].isbn == isbn:
            return books[mid]
        elif books[mid].isbn < isbn:
            low = mid + 1
        else:
            high = mid - 1
    return None


# Example usage
if __name__ == "__main__":
    # Create a library instance
    library = Library()

    # Add more books to the library
    library.add_book(PrintedBook(1001, "Printed Book One", "Author A", "New"))
    library.add_book(DigitalBook(1002, "Digital Book Two", "Author B", 5.5))  # 5.5MB file size
    library.add_book(PrintedBook(1003, "Printed Book Three", "Author C", "Used"))
    library.add_book(PrintedBook(1004, "Printed Book Four", "Author D", "New"))
    library.add_book(DigitalBook(1005, "Digital Book Five", "Author E", 2.3))  # 2.3MB file size
    library.add_book(PrintedBook(1006, "Printed Book Six", "Author F", "Damaged"))
    library.add_book(DigitalBook(1007, "Digital Book Seven", "Author G", 8.0))  # 8MB file size
    library.add_book(PrintedBook(1008, "Printed Book Eight", "Author H", "Like New"))

    # Add more users
    user1 = User(1, "John Doe")
    user2 = User(2, "Jane Smith")
    user3 = User(3, "Alice Johnson")
    user4 = User(4, "Bob Williams")

    library.add_user(user1)
    library.add_user(user2)
    library.add_user(user3)
    library.add_user(user4)

    # Search for books by ISBN and issue transactions
    isbn_to_find = 1005
    found_book = library.search_by_isbn(isbn_to_find)

    if found_book:
        print(f"Book found: {found_book.title}")
        # Issue a borrow transaction for user1
        transaction = BorrowTransaction(1, user1, found_book)
        transaction.issue_transaction()
    else:
        print("Book not found")

    # Search and borrow a different book for user2
    isbn_to_find = 1004
    found_book = library.search_by_isbn(isbn_to_find)

    if found_book:
        print(f"Book found: {found_book.title}")
        # Issue a borrow transaction for user2
        transaction = BorrowTransaction(2, user2, found_book)
        transaction.issue_transaction()
    else:
        print("Book not found")

    # Borrow another book for user3
    isbn_to_find = 1008
    found_book = library.search_by_isbn(isbn_to_find)

    if found_book:
        print(f"Book found: {found_book.title}")
        # Issue a borrow transaction for user3
        transaction = BorrowTransaction(3, user3, found_book)
        transaction.issue_transaction()
    else:
        print("Book not found")
